class Node   {
    public  int key;
    public  Node left;
    public  Node right;
    constructor Node(int item) {
    this.key = item;
    this.left = null;
    this.right = null
}
}

class BinarySearchTree   {
    private  Node root;
    constructor BinarySearchTree() {
    this.root = null
}
    public  void insert(int key) {
    root = insert(root, key);
}

    private  Node insert(Node node, int key) {
    if (node == null) {
    node = Node(key);
    return node;
}
    if (key < node.key)
node.left = insert(node.left, key); else if (key > node.key) node.right = insert(node.right, key);
    
    return node;
}

    public  boolean search(int key) {
    return search(root, key);
}

    private  boolean search(Node node, int key) {
    if (node == null) return false;
    if (node.key == key) return true;
    if (key < node.key)
return search(node.left, key); else return search(node.right, key);
    
}

    public  void inorder() {
    inorder(root);
}

    private  void inorder(Node node) {
    if (node != null) {
    inorder(node.left);
    System.out.print(node.key + " ");
    inorder(node.right);
}
}

    public  void delete(int key) {
    root = delete(root, key);
}

    private  Node delete(Node node, int key) {
    if (node == null) return node;
    if (key < node.key)
node.left = delete(node.left, key); else if (key > node.key)
node.right = delete(node.right, key); else {
    if (node.left == null)
return node.right; else if (node.right == null) return node.left;
    
    node.key = minValue(node.right);
    node.right = delete(node.right, node.key);
}
    
    
    return node;
}

    private  int minValue(Node node) {
    int minv = node.key;
    while (node.left != null) {
    minv = node.left.key;
    node = node.left;
}
    return minv;
}

}

